name: go-time CI/CD Pipeline

on: 
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action (apply or destroy)'
        required: true
        default: 'apply'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: 'kubectl'
    
    - name: Authenticate Docker with Google Container Registry
      run: gcloud auth configure-docker
    
    - name: Build Docker Image with Google Cloud Build
      run: |
        gcloud builds submit --tag europe-west4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-engr-test/go-time-api:latest .

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Terraform Init
      run: terraform init
    
    - name: List Terraform State Resources
      run: terraform state list 

    - name: Create terraform.tfvars
      run: |
        echo 'image           = "europe-west4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-engr-test/go-time-api:latest"' >> terraform.tfvars
        echo 'project         = "${{ secrets.GCP_PROJECT_ID }}"' >> terraform.tfvars
        echo 'region          = "${{ secrets.REGION }}"' >> terraform.tfvars

    - name: Terraform Plan
      env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      run: |
        terraform plan -var-file="terraform.tfvars"

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      run: |
        terraform apply -var-file="terraform.tfvars" -auto-approve

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      run: |
        terraform destroy -auto-approve

    # New Step: Wait for API to be Ready
    - name: Wait for API readiness
      run: |
        echo "Waiting for API to be ready..."
        sleep 180 

    - name: Verify API is accessible
      run: |
        API_ENDPOINT=$(kubectl get ingress go-time-apps -n go-time-apps -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$API_ENDPOINT" ]; then
          echo "Ingress address not found."
          exit 1
        fi
        echo "Ingress address: $API_ENDPOINT"

        # Test the API endpoint
        echo "Hitting the API at http://${API_ENDPOINT}/time"
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${API_ENDPOINT}/time)
        echo "Response Code: $RESPONSE"
        if [ "$RESPONSE" -ne 200 ]; then
          echo "API is not accessible or returned unexpected response code."
          exit 1
        fi
        echo "API is accessible and returned a 200 OK response."

